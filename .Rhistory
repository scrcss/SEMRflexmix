library("Pflexmix")
library("pflexmix")
install.packages("C:/Users/CyanYu/Desktop/PFMix/Pflexmix_2.3-17.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/CyanYu/Desktop/PFMix/Pflexmix_2.3-17.tar.gz", repos = NULL, type = "source")
library("flexmix")
library(myflexmix)
require(nnet)
DataGen = function(N,beta,sigma,v){
#### parameter format, if there are K components ####
## beta: K*(1+dim of x)
## sigma: length(K)
## v: (K-1)*(1+dim of z)
v = rbind(v) # in case there is 2 components and v is a vector of length 1+dim(z)[2]
K = dim(beta)[1]
if ((dim(v)[1]!=K-1)|(length(sigma)!=K)){
stop("parameters are given incorrectly!")
}
z = cbind(1,rbinom(N,1,0.5),rnorm(N,0,1))
# there may be problemic when z is discrete
pi_0 <- cbind(exp(z%*%t(v)),1)
pi_0 = pi_0/rowSums(pi_0)
cl = t(apply(pi_0,1,function(u) rmultinom(1,1,u)))
cl = apply(cl,1,function(u) which(u==1))
x = cbind(1, rbinom(N,1,0.5),rnorm(N,0,1))
y = rep(0, N)
for (i in 1:K){
y[cl==i] = x[cl==i, ] %*% betastar[i, ] + rnorm(sum(cl==i), 0, sigmastar[i])
}
z = z[,-1]
x = x[,-1]
x = as.matrix(x)
z = as.matrix(z)
colnames(x) = paste0("x", 1:dim(x)[2])
colnames(z) = paste0("z", 1:dim(z)[2])
return(list(parameters=list(N,beta,sigma,v),
x=x,
y=y,
z=z,
cl=cl,
k=K))
}
DataGen2 = function(N,beta,sigma,v){
#### parameter format, if there are K components ####
## beta: K*(1+dim of x)
## sigma: length(K)
## v: (K-1)*(1+dim of z)
K = dim(beta)[1]
pi_0 = matrix(v, length(v), N)
cl = t(apply(pi_0,2,function(u) rmultinom(1,1,u)))
cl = apply(cl,1,function(u) which(u==1))
x = cbind(1, rbinom(N,1,0.5),rnorm(N,0,1))
y = rep(0, N)
for (i in 1:K){
y[cl==i] = x[cl==i, ] %*% betastar[i, ] + rnorm(sum(cl==i), 0, sigmastar[i])
}
x = x[,-1]
x = as.matrix(x)
colnames(x) = paste0("x", 1:dim(x)[2])
return(list(parameters=list(N,beta,sigma,v),
x=x,
y=y,
z=NULL,
cl=cl,
k=K))
}
######################
N = 200 # 50, 100, 200, 400
D = 8
DB = 1
k = 2
betadim = 3 # including beta0
betastar = matrix(NA, k, betadim)
# for(i in 1:k){
#   betastar[i, ] = c(DB * (i - 1), 2, -1)
# }
betastar[1, ] <- c(1, -1, 2)
betastar[2, ] <- c(DB * 3, 2, -1)
# betastar[3, ] <- c(DB * 4, 4, 3)
# betastar[4, ] <- c(5 * DB, -2, 1)
# betastar[5, ] <- c(6 * DB, -4, 3)
# sigmastar = rep(as.numeric(paste0("0.",D)),k) # length of n.truecomponents
sigmastar = c(0.8, rep(as.numeric(paste0("0.",D)),k-1))
vstar <- c(0.6, 0.4)
Data = DataGen2(N,betastar,sigmastar,vstar)
recPflexmix <- function(x, y, z, min.comp=20, Wupdate = 1)
{
N = length(y)
W = rep(1, N)
k = 1
res = list()
Model <- FLXMRParticalglm(as.formula(paste0('~', paste(paste0("x", 1:dim(x)[2]), collapse = '+'))), Wupdate = Wupdate)
if(is.null(z)){
conModel <- NULL
dataFrame <-data.frame(y=y,x)
colnames(dataFrame) <- c('y', paste0("x", 1:dim(x)[2]))
}else{
conModel <- FLXPmultinom(as.formula(paste0('~', paste(paste0("z", 1:dim(z)[2]), collapse = '+'))))
dataFrame <-data.frame(y=y,x,z)
colnames(dataFrame) <- c('y', paste0("x", 1:dim(x)[2]), paste0("z", 1:dim(z)[2]))
}
mycont <- list(minprior = 1)
as(mycont, "FLXcontrol")
while(sum(W) > min.comp){
singular = 1
try.init = 0
invalid.est = T
flag  = F
flag.err = F
while((singular!=0)|invalid.est){
try.init = try.init + 1
res[[k]] = try(Pflexmix(y~1,k = 2,model=Model,concomitant = conModel, data=dataFrame, weights = W, control = mycont))   # 若遇到错误呢
if("try-error" %in% class(res[[k]])){
flag.err = T
res[[k]] = NULL
break
}else{
singular = res[[k]]@model[[1]]@singular
invalid.est = any(abs(res[[k]]@concomitant@coef)>10)
}
if(try.init > 5) {
flag = T
break
}
}
if(((flag == T) & (singular)) | (flag.err)) break
W=W*res[[k]]@posterior$scaled[, 1]
k = k+1
}
em.beta = sapply(res,function(x) parameters(x)$Comp.2)
p = dim(em.beta)[1]
beta = cbind(em.beta[1:(p-1),])
sigma = em.beta[p,]
U = cbind(sapply(res,function(x) x@posterior$scaled[,2]))
final.U = t(rbind(1,apply(1-U,1,cumprod)))
final.U = final.U*cbind(U,1)
cluster=apply(final.U,1,which.max)
singular = sapply(res, function(x) x@model[[1]]@singular)
temp_v = sapply(res, function(x) x@concomitant@coef[, 2])
v = cumprod(c(1, 1-temp_v)) * c(temp_v,1)
return(list(beta=beta,sigma=sigma,v = v, U=final.U,cluster=cluster,k=k,err = flag.err, singular = singular))
}
Data$z
x = Data$x
z = Data$z
y = Data$y
cl = Data$cl
dataFrame <-data.frame(y=Data$y,x,z)
min.comp = 10
res.flexEM1 = recPflexmix(x, y, z, min.comp=min.comp, Wupdate = 1)
res.flexEM1$beta
N = length(y)
W = rep(1, N)
k = 1
res = list()
Model <- FLXMRParticalglm(as.formula(paste0('~', paste(paste0("x", 1:dim(x)[2]), collapse = '+'))), Wupdate = Wupdate)
if(is.null(z)){
conModel <- NULL
dataFrame <-data.frame(y=y,x)
colnames(dataFrame) <- c('y', paste0("x", 1:dim(x)[2]))
}else{
conModel <- FLXPmultinom(as.formula(paste0('~', paste(paste0("z", 1:dim(z)[2]), collapse = '+'))))
dataFrame <-data.frame(y=y,x,z)
colnames(dataFrame) <- c('y', paste0("x", 1:dim(x)[2]), paste0("z", 1:dim(z)[2]))
}
mycont <- list(minprior = 1)
as(mycont, "FLXcontrol")
Wupdate = 1
N = length(y)
W = rep(1, N)
k = 1
res = list()
Model <- FLXMRParticalglm(as.formula(paste0('~', paste(paste0("x", 1:dim(x)[2]), collapse = '+'))), Wupdate = Wupdate)
if(is.null(z)){
conModel <- NULL
dataFrame <-data.frame(y=y,x)
colnames(dataFrame) <- c('y', paste0("x", 1:dim(x)[2]))
}else{
conModel <- FLXPmultinom(as.formula(paste0('~', paste(paste0("z", 1:dim(z)[2]), collapse = '+'))))
dataFrame <-data.frame(y=y,x,z)
colnames(dataFrame) <- c('y', paste0("x", 1:dim(x)[2]), paste0("z", 1:dim(z)[2]))
}
mycont <- list(minprior = 1)
as(mycont, "FLXcontrol")
A = try(Pflexmix(y~1,k = 2,model=Model,concomitant = conModel, data=dataFrame, weights = W, control = mycont))
A@logLik
logLik(A)
library(myflexmix)
DataGen = function(N,beta,sigma,v){
#### parameter format, if there are K components ####
## beta: K*(1+dim of x)
## sigma: length(K)
## v: (K-1)*(1+dim of z)
v = rbind(v) # in case there is 2 components and v is a vector of length 1+dim(z)[2]
K = dim(beta)[1]
if ((dim(v)[1]!=K-1)|(length(sigma)!=K)){
stop("parameters are given incorrectly!")
}
z = cbind(1,rbinom(N,1,0.5),rnorm(N,0,1))
# there may be problemic when z is discrete
pi_0 <- cbind(exp(z%*%t(v)),1)
pi_0 = pi_0/rowSums(pi_0)
cl = t(apply(pi_0,1,function(u) rmultinom(1,1,u)))
cl = apply(cl,1,function(u) which(u==1))
x = cbind(1, rbinom(N,1,0.5),rnorm(N,0,1))
y = rep(0, N)
for (i in 1:K){
y[cl==i] = x[cl==i, ] %*% betastar[i, ] + rnorm(sum(cl==i), 0, sigmastar[i])
}
z = z[,-1]
x = x[,-1]
x = as.matrix(x)
z = as.matrix(z)
colnames(x) = paste0("x", 1:dim(x)[2])
colnames(z) = paste0("z", 1:dim(z)[2])
return(list(parameters=list(N,beta,sigma,v),
x=x,
y=y,
z=z,
cl=cl,
k=K))
}
recPflexmix <- function(x, y, z, min.comp=20, Wupdate = 1)
{
N = length(y)
W = rep(1, N)
k = 1
res = list()
Model <- FLXMRParticalglm(as.formula(paste0('~', paste(paste0("x", 1:dim(x)[2]), collapse = '+'))), Wupdate = Wupdate)
if(is.null(z)){
conModel <- NULL
dataFrame <-data.frame(y=y,x)
colnames(dataFrame) <- c('y', paste0("x", 1:dim(x)[2]))
}else{
conModel <- FLXPmultinom(as.formula(paste0('~', paste(paste0("z", 1:dim(z)[2]), collapse = '+'))))
dataFrame <-data.frame(y=y,x,z)
colnames(dataFrame) <- c('y', paste0("x", 1:dim(x)[2]), paste0("z", 1:dim(z)[2]))
}
mycont <- list(minprior = 1)
as(mycont, "FLXcontrol")
while(sum(W) > min.comp){
singular = 1
try.init = 0
invalid.est = T
flag  = F
flag.err = F
while((singular!=0)|invalid.est){
try.init = try.init + 1
res[[k]] = try(stepPFlexmix(y~1,k = 2,model=Model,concomitant = conModel,data=dataFrame, weights = W, control = mycont, nrep = 3, unique = T))   # 若遇到错误呢
if("try-error" %in% class(res[[k]])){
flag.err = T
res[[k]] = NULL
break
}else{
singular = res[[k]]@model[[1]]@singular
invalid.est = any(abs(res[[k]]@concomitant@coef)>10)
}
if(try.init > 5) {
flag = T
break
}
}
if(((flag == T) & (singular)) | (flag.err)) break
W=W*res[[k]]@posterior$scaled[, 1]
k = k+1
}
em.beta = sapply(res,function(x) parameters(x)$Comp.2)
p = dim(em.beta)[1]
beta = cbind(em.beta[1:(p-1),])
sigma = em.beta[p,]
U = cbind(sapply(res,function(x) x@posterior$scaled[,2]))
final.U = t(rbind(1,apply(1-U,1,cumprod)))
final.U = final.U*cbind(U,1)
cluster=apply(final.U,1,which.max)
singular = sapply(res, function(x) x@model[[1]]@singular)
temp_v = sapply(res, function(x) x@concomitant@coef[, 2])
v = cumprod(c(1, 1-temp_v)) * c(temp_v,1)
return(list(beta=beta,sigma=sigma,v = v, U=final.U,cluster=cluster,k=k,err = flag.err, singular = singular))
}
N = 200 # 50, 100, 200, 400
D = 1
k = 5
betadim = 3 # including beta0
betastar = matrix(NA, k, betadim)
betastar[1, ] = c(1, -1, 2)
betastar[2, ] = c(1,  1, 1)
betastar[3, ] = c(1,  2, 0)
betastar[4, ] = c(1,  0, -2)
betastar[5, ] = c(1, -2, -1)
sigmastar = rep(as.numeric(paste0("0.",D)),k) # length of n.truecomponents
vstar <- rbind(c(-1, -1,1),
c(2,1,-1),
c(-0.5,1,-1),
c(0,-1,-1))
Data = DataGen(N,betastar,sigmastar,vstar)
x = Data$x
z = Data$z
y = Data$y
cl = Data$cl
min.comp = 10
res.flexEM1 = recPflexmix(x, y, z, min.comp=min.comp, Wupdate = 1)
install.packages("C:/Users/CyanYu/Desktop/myMix/myflexmix_2.3-17.tar.gz", repos = NULL, type = "source")
library(myflexmix)
DataGen = function(N,beta,sigma,v){
#### parameter format, if there are K components ####
## beta: K*(1+dim of x)
## sigma: length(K)
## v: (K-1)*(1+dim of z)
v = rbind(v) # in case there is 2 components and v is a vector of length 1+dim(z)[2]
K = dim(beta)[1]
if ((dim(v)[1]!=K-1)|(length(sigma)!=K)){
stop("parameters are given incorrectly!")
}
z = cbind(1,rbinom(N,1,0.5),rnorm(N,0,1))
# there may be problemic when z is discrete
pi_0 <- cbind(exp(z%*%t(v)),1)
pi_0 = pi_0/rowSums(pi_0)
cl = t(apply(pi_0,1,function(u) rmultinom(1,1,u)))
cl = apply(cl,1,function(u) which(u==1))
x = cbind(1, rbinom(N,1,0.5),rnorm(N,0,1))
y = rep(0, N)
for (i in 1:K){
y[cl==i] = x[cl==i, ] %*% betastar[i, ] + rnorm(sum(cl==i), 0, sigmastar[i])
}
z = z[,-1]
x = x[,-1]
x = as.matrix(x)
z = as.matrix(z)
colnames(x) = paste0("x", 1:dim(x)[2])
colnames(z) = paste0("z", 1:dim(z)[2])
return(list(parameters=list(N,beta,sigma,v),
x=x,
y=y,
z=z,
cl=cl,
k=K))
}
recPflexmix <- function(x, y, z, min.comp=20, Wupdate = 1)
{
N = length(y)
W = rep(1, N)
k = 1
res = list()
Model <- FLXMRParticalglm(as.formula(paste0('~', paste(paste0("x", 1:dim(x)[2]), collapse = '+'))), Wupdate = Wupdate)
if(is.null(z)){
conModel <- NULL
dataFrame <-data.frame(y=y,x)
colnames(dataFrame) <- c('y', paste0("x", 1:dim(x)[2]))
}else{
conModel <- FLXPmultinom(as.formula(paste0('~', paste(paste0("z", 1:dim(z)[2]), collapse = '+'))))
dataFrame <-data.frame(y=y,x,z)
colnames(dataFrame) <- c('y', paste0("x", 1:dim(x)[2]), paste0("z", 1:dim(z)[2]))
}
mycont <- list(minprior = 1)
as(mycont, "FLXcontrol")
while(sum(W) > min.comp){
singular = 1
try.init = 0
invalid.est = T
flag  = F
flag.err = F
while((singular!=0)|invalid.est){
try.init = try.init + 1
res[[k]] = try(stepPFlexmix(y~1,k = 2,model=Model,concomitant = conModel,data=dataFrame, weights = W, control = mycont, nrep = 3, unique = T))   # 若遇到错误呢
if("try-error" %in% class(res[[k]])){
flag.err = T
res[[k]] = NULL
break
}else{
singular = res[[k]]@model[[1]]@singular
invalid.est = any(abs(res[[k]]@concomitant@coef)>10)
}
if(try.init > 5) {
flag = T
break
}
}
if(((flag == T) & (singular)) | (flag.err)) break
W=W*res[[k]]@posterior$scaled[, 1]
k = k+1
}
em.beta = sapply(res,function(x) parameters(x)$Comp.2)
p = dim(em.beta)[1]
beta = cbind(em.beta[1:(p-1),])
sigma = em.beta[p,]
U = cbind(sapply(res,function(x) x@posterior$scaled[,2]))
final.U = t(rbind(1,apply(1-U,1,cumprod)))
final.U = final.U*cbind(U,1)
cluster=apply(final.U,1,which.max)
singular = sapply(res, function(x) x@model[[1]]@singular)
temp_v = sapply(res, function(x) x@concomitant@coef[, 2])
v = cumprod(c(1, 1-temp_v)) * c(temp_v,1)
return(list(beta=beta,sigma=sigma,v = v, U=final.U,cluster=cluster,k=k,err = flag.err, singular = singular))
}
N = 200 # 50, 100, 200, 400
D = 1
k = 5
betadim = 3 # including beta0
betastar = matrix(NA, k, betadim)
betastar[1, ] = c(1, -1, 2)
betastar[2, ] = c(1,  1, 1)
betastar[3, ] = c(1,  2, 0)
betastar[4, ] = c(1,  0, -2)
betastar[5, ] = c(1, -2, -1)
sigmastar = rep(as.numeric(paste0("0.",D)),k) # length of n.truecomponents
vstar <- rbind(c(-1, -1,1),
c(2,1,-1),
c(-0.5,1,-1),
c(0,-1,-1))
Data = DataGen(N,betastar,sigmastar,vstar)
x = Data$x
z = Data$z
y = Data$y
cl = Data$cl
min.comp = 10
res.flexEM1 = recPflexmix(x, y, z, min.comp=min.comp, Wupdate = 1)
library("devtools")
library("usethis")
create("E:\\SEMR\\SEMRflexmix")
setwd("E:\\SEMR\\SEMRflexmix")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
build()
library(myflexmix)
remove.packages("myflexmix", lib="~/R/win-library/4.1")
library(SEMRflexmix)
remove.packages("SEMRflexmix", lib="~/R/win-library/4.1")
